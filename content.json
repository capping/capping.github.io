{"meta":{"title":"Z-II's Blog","subtitle":null,"description":null,"author":"Xuebin Zhang","url":"https://capping.github.io"},"pages":[{"title":"","date":"2018-09-01T12:57:26.398Z","updated":"2018-09-01T12:57:26.398Z","comments":true,"path":"about/index.html","permalink":"https://capping.github.io/about/index.html","excerpt":"","text":"关于我A Programmer. External Links 简书 | 微博 Gmail: z.capping@gmail.com"},{"title":"","date":"2018-09-01T12:57:26.398Z","updated":"2018-09-01T12:57:26.398Z","comments":false,"path":"categories/index.html","permalink":"https://capping.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-09-01T12:57:26.400Z","updated":"2018-09-01T12:57:26.400Z","comments":false,"path":"tags/index.html","permalink":"https://capping.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"常用的PHP工具类","slug":"php-common-custome-function","date":"2018-08-31T08:46:14.000Z","updated":"2018-09-01T12:57:26.397Z","comments":true,"path":"2018/08/31/php-common-custome-function/","link":"","permalink":"https://capping.github.io/2018/08/31/php-common-custome-function/","excerpt":"","text":"StringUtil 生成随机字符串12345678910function randomString($length = 6) :string&#123; $pattern = &apos;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;; $str = &apos;&apos;; for ($i = 0; $i &lt; $length; $i++) &#123; $str .= $pattern&#123;mt_rand(0, 61)&#125;; &#125; return $str;&#125;","categories":[{"name":"php","slug":"php","permalink":"https://capping.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"https://capping.github.io/tags/php/"}]},{"title":"nohup and &","slug":"nohup-and-&","date":"2018-08-30T03:11:08.000Z","updated":"2018-09-01T12:57:26.397Z","comments":true,"path":"2018/08/30/nohup-and-&/","link":"","permalink":"https://capping.github.io/2018/08/30/nohup-and-&/","excerpt":"","text":"今天来解决下一直存在的一个疑问 nohup 和 &amp; 到底是什么？ 在日常中使用往往是这样子的1nohup php demo.php &amp; 但是为什么要两个一起用呢？ 只用一个行不行？ 只用其中的一个是什么效果呢？ 我们先看最后一个问题 只用 &amp;&amp;的意思是在后台运行, 就是当你运行代码 php demo.php &amp; 时, 即使你使用 Ctrl C ,代码照样会运行(因为对SIGINT信号免疫)。但是要注意, 当你关掉shell后, php demo.php进程就消失了。可见 &amp; 的后台并不硬(因为对SIGHUP信号不免疫) 只用 nohupnohup的意思是忽略SIGHUP信号, 所以当运行 nohup demo.php 的时候, 关闭shell php demo.php 进程还是存在(对SIGHUP信号免疫)。 但是直接在shell中使用 Ctrl C, php demo.php进程就会消失(因为对SIGINT信号不免疫)。 所以, &amp;和nohup没有半毛钱的关系, 要让进程真正不受shell中Ctrl C和shell关闭的影响, 那该怎么办呢？ 那就用 nohup php demo.php &amp; 吧, 两全其美。 解决了最后一个问题, 其他问题就迎刃而解啦 如果你懂守护进程, 那么 nohup php demo.php &amp; 颇有点让 php demo.php 成为守护进程的感觉。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://capping.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://capping.github.io/tags/linux/"}]},{"title":"Linux服务器磁盘空间不足异常","slug":"Centos-disk-space-abnormal","date":"2018-08-28T02:32:24.000Z","updated":"2018-09-01T12:57:26.396Z","comments":true,"path":"2018/08/28/Centos-disk-space-abnormal/","link":"","permalink":"https://capping.github.io/2018/08/28/Centos-disk-space-abnormal/","excerpt":"","text":"昨天连接数据库的时候出现如下错误: got error 28 from storage engine 经过搜索引擎了解到原来是磁盘空间不足了。登陆服务器。输入以下命令1df -h 果然磁盘占用 100% 了！怎么办？ 删日志吧。1234567# 进入根目录cd /# 查看当前目录下的磁盘占用情况， 然后一步步分析看哪些文件占用较大du -sh *# 在这步发现磁盘占用情况最多 30% 的样子，百思不得解 结果令人失望，删掉日志文件磁盘占用情况依旧 95% 以上。但是就这样吧， 起码数据库能访问了 今天过来磁盘占用又 100% 了 于是就想到了 是不是删除了文件 但是对应的进程并没有被杀掉 1lsof | grep deleted 果然发现了端倪, 于是kill掉文件对应的进程号 再 df -h 看存储 恢复正常~ 或者下面的命令会一次全删掉 lsof |awk ‘/deleted/{print $2}’|xargs kill -9 然后 df -h, 看到磁盘占用回到了 28%","categories":[{"name":"Linux","slug":"Linux","permalink":"https://capping.github.io/categories/Linux/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://capping.github.io/tags/centos/"},{"name":"linux","slug":"linux","permalink":"https://capping.github.io/tags/linux/"}]},{"title":"Centos安装 phpredis 扩展","slug":"Centos-install-phpredis","date":"2018-08-20T05:49:14.000Z","updated":"2018-09-01T12:57:26.396Z","comments":true,"path":"2018/08/20/Centos-install-phpredis/","link":"","permalink":"https://capping.github.io/2018/08/20/Centos-install-phpredis/","excerpt":"","text":"安装配置1234567891011121314151617181920212223242526272829303132333435# 1. 下载phprediswget https://github.com/phpredis/phpredis/archive/4.1.1.tar.gz# 2. 解压 # z-tar包被gzip压缩,用gunzip解压 x-从tar包中提取文件 v-显示详细信息 f-指定被处理的文件tar -zxvf 4.1.1.tar.gz# 3. 进入解压后目录cd phpredis-4.1.1/# 4. 生成configure配置文件/usr/local/php/bin/phpize# 5. 配置./configure --with-php-config=/usr/local/php/bin/php-config# 6. 编译make# 7. 运行测试make test# 8. 安装make install# 9. 配置ini文件vi /usr/local/php/lib/php.ini&gt; extension=&quot;redis.so&quot;# 10. 重启php-fpmkill PID/usr/local/php/sbin/php-fpm# 11. 重启nginxnginx -s reload # 重启nginx 遇到的问题重启php-fpm时使用 /usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php-fpm.conf 导致 phpinfo() 中参数 Loaded Configuration File 是 /usr/local/php/etc/php-fpm.conf ,所以打印 phpinfo 时一直无法显示redis扩展。 正确的做法是上面显示的，不指定配置文件 -c /usr/local/php/etc/php-fpm.conf 的做法","categories":[{"name":"php","slug":"php","permalink":"https://capping.github.io/categories/php/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://capping.github.io/tags/centos/"},{"name":"linux","slug":"linux","permalink":"https://capping.github.io/tags/linux/"},{"name":"php","slug":"php","permalink":"https://capping.github.io/tags/php/"},{"name":"redis","slug":"redis","permalink":"https://capping.github.io/tags/redis/"}]},{"title":"Centos安装配置redis","slug":"centos-install-redis","date":"2018-08-20T02:27:14.000Z","updated":"2018-09-01T12:57:26.396Z","comments":true,"path":"2018/08/20/centos-install-redis/","link":"","permalink":"https://capping.github.io/2018/08/20/centos-install-redis/","excerpt":"","text":"安装12345678910cd /usr/local/src/# 下载wget http://download.redis.io/releases/redis-4.0.11.tar.gz# 解压tar xzf redis-4.0.11.tar.gzmv redis-4.0.11 /usr/local/rediscd /usr/local/redismakemake test 有的机器会出现类似以下错误：123make[1]: Entering directory `/root/redis/src&apos;You need tcl 8.5 or newer in order to run the Redis test…… 这是因为没有安装tcl导致，yum安装即可：123yum install tclmake testmake install 配置1234567891011121314151617bind: 在bind 127.0.0.1前加H#&quot;将其注释掉, 使外网可以连接默认为保护模式, 把 protected-mode yes 改为 protected-mode no默认为不守护进程模式, 把daemonize no 改为daemonize yes 使Redis进程在后台运行将 requirepass foobared前的&quot;#&quot;去掉, 密码改为你想要设置的密码daemonize : 是否以后台daemon方式运行pidfile : pid文件位置port : 监听的端口号timeout : 请求超时时间loglevel : log信息级别logfile : log文件位置databases : 开启数据库的数量save * * : 保存快照的频率, 第一个*表示多长时间, 第三个*表示执行多少次写操作。在一定时间内执行一定数量的写操作时, 自动保存快照。可设置多个条件。rdbcompression : 是否使用压缩dbfilename : 数据快照文件名（只是文件名）dir : 数据快照的保存目录（仅目录）appendonly : 是否开启appendonlylog, 开启的话每次写操作会记一条log, 这会提高数据抗风险能力, 但影响效率。appendfsync : appendonlylog如何同步到磁盘。三个选项, 分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步 redis 配置文件示例 https://github.com/linli8/cnblogs/blob/master/redis%E5%89%AF%E6%9C%AC.conf 启动 : redis-server ./redis.conf停止 : redis-cli -h 127.0.0.1 -p 6379 shutdown 开启自启动: echo “/usr/local/bin/redis-server /usr/local/redis/redis.conf” &gt;&gt;/etc/rc.local","categories":[{"name":"redis","slug":"redis","permalink":"https://capping.github.io/categories/redis/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://capping.github.io/tags/centos/"},{"name":"linux","slug":"linux","permalink":"https://capping.github.io/tags/linux/"},{"name":"redis","slug":"redis","permalink":"https://capping.github.io/tags/redis/"}]},{"title":"常用软件激活记录","slug":"software-activation","date":"2018-08-16T01:55:08.000Z","updated":"2018-09-01T12:57:26.397Z","comments":true,"path":"2018/08/16/software-activation/","link":"","permalink":"https://capping.github.io/2018/08/16/software-activation/","excerpt":"","text":"1. intellij idea 2018 激活注册码 (最后更新时间 2018-8-28)1EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog== host文件添加如下:10.0.0.0 account.jetbrains.com ———————————————————–2. PHPStome 2018破解 (最后更新时间 2018-8-28)License server:1http://www.0-php.com:1017","categories":[{"name":"tools","slug":"tools","permalink":"https://capping.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"https://capping.github.io/tags/tools/"}]},{"title":"面试","slug":"interview","date":"2018-08-08T06:41:00.000Z","updated":"2018-09-01T12:57:26.397Z","comments":true,"path":"2018/08/08/interview/","link":"","permalink":"https://capping.github.io/2018/08/08/interview/","excerpt":"","text":"这边记录一些php的面试题(不保证正确性，准确性)，会不定期更新，如果有什么错误或者更好的方案，希望得到你的指导 设计一个发红包，抢红包的系统 问题一： 金额是预先分配还是实时计算答： 实时计算，预算需要占存储，并且会产生大量的数据库读写操作，实时效率很高，预算效率才低 123456789101112131415161718192021222324252627282930function getRedPackageMoney($min = 1)&#123; $redPackageId = 10; // 红包ID $redis = new Redis(); $redis-&gt;pconnect(&apos;127.0.0.1&apos;, 6379, 1); $remainSize = $redis-&gt;get(&apos;remainSize:&apos; . $redPackageId); $remainMoney = $redis-&gt;get(&apos;remainMoney:&apos; . $redPackageId); if (!$remainSize) &#123; return json_encode([&apos;status&apos; =&gt; &apos;400&apos;, &apos;message&apos; =&gt; &apos;红包已抢完&apos;]); &#125; if ($remainSize == 1) &#123; $redis-&gt;decr(&apos;remainSize:&apos; . $redPackageId); $redis-&gt;decrby(&apos;remainMoney:&apos; . $redPackageId, $remainMoney); return json_encode([&apos;status&apos; =&gt; 200, &apos;money&apos; =&gt; $remainMoney]); &#125; $safeTotal = ($remainMoney - $remainSize * $min) / $remainSize; $money = mt_rand($min, $safeTotal); $money = $money / 100; // 主要ini配置项serialize_precision $remainMoney = $safeTotal - $money; $redis-&gt;decr(&apos;remainSize:&apos; . $redPackageId); $redis-&gt;decrby(&apos;remainMoney:&apos; . $redPackageId, $money); return json_encode([&apos;status&apos; =&gt; 200, &apos;money&apos; =&gt; $money]);&#125;$money = getRedPackageMoney();print_r($money);","categories":[{"name":"php","slug":"php","permalink":"https://capping.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"https://capping.github.io/tags/php/"},{"name":"面试","slug":"面试","permalink":"https://capping.github.io/tags/面试/"}]},{"title":"JavaSE","slug":"JavaSE","date":"2018-08-08T01:57:06.000Z","updated":"2018-09-01T12:57:26.396Z","comments":true,"path":"2018/08/08/JavaSE/","link":"","permalink":"https://capping.github.io/2018/08/08/JavaSE/","excerpt":"","text":"Getting StartedAn introduction to Java technology and lessions on installing Java development software and using it to create a simple program. The Java Technology PhenomenonJava technology is both a programming language and a platform. (java即是编程语言也是平台) The java Programming LanguageThe Java programming language is a high-level language that can be characterized by all of the following buzzword. Simple Architecture neutral (平台无关的) Object oriented Portable (可移植的) Distributed (分布式的) High performance Multithreaded Roubust (健壮的) Dynamic Secure MyProgram.java – javac –&gt; MyProgram.class – java –&gt; MyProgram Through the Java VM, the same application is capable of running on multiple platforms. The java platformA platform is the hardware or software environment in which a program runs.The Java platform has two components: The Java Virtual Machine. The Java Application Programming Interface(API).JVM 是java平台的基础，并被移植到各种给予硬件的平台上。The API is a large collection of ready-made(现成) software componment that provide many useful capabilities(功能). It is grouped into libraries of related classes and interfaces; these libraries are known as packages. The API and Java Virtual Machine insulate the program from the underlying hardware. What Can Java Technology Do? Development Tools: The development tools provide everything you’ll need for compiling, running, monitoring, debugging, and documenting your application. As a new developer, the main tools you’ll be using are the javac compiler, the java launcher and the javadoc documentation tool. Application Programming Interface(API): The API provides the core functionlity of the java programming language. Deployment Technologies User Interface Tookit Integration Libraries: Integration libraries such as the Java IDL API, JDBC API, Java Naming and Directory Interface(JNDA) API, and Java Remote Method Invocation over Internet Inter-ORB Protocol Technology (Java RMI-IIOP Technology) enable database access and manipulation of remote objects. How Will Java Technology Change My Life?Learning the Java languageLessons describing the essential concepts and features of the Java Programming Language. This trail provides everything you’ll need to know about getting started with the Java programming language. Object-Oriented Programming Conceptsteaches you the core concepts behind object-oriented programming: objects, messages, classes and inheritance. The lesson ends by showing you how these concepts translate into code. What Is an Object?Software objects are conceptually similar to real-world object: they too consist of state and related behavior. An object stores it state in fields(variables in someprogramming languages) and exposes its behavior through methods (functions in some programming languages).Methods operate on an object’s internal state and serve asthe primary mechanism for object-to-object communication. Hiding internal state and requiring all interaction to be performed through an object’s methods is know asdata encapsulation（数据封装） – a fundamental principel of object-oriented programming. Bundling code into individual software objects provides a number of benefit, include: Modularity: The source code for an object can be written and maintained independently of the source code for other objects. Once created, an object can be easily passed around inside the system. Information-hiding: By interacting only with an object’s methods, the datails of its internal implementation remain hidden from the outside world. Code re-use: If an object already exists (perhaps written by another software developer), you can use that object in your program. This allows specialists to implement/test/debug complex, task-specific objects, which you can then trust to run in your own code. Pluggability and debugging easy: If a particular object turns out to be problematic, you can simple remove it from your application and plug in a different object as its replacement.This is analogous to fixing mechanical problems in ther real world. If a bolt breaks, you replace it, not the entire machine. What Is a Class?A class is the blueprint from which individual objects are created. What Is Inheritance?Object-Oriented programming allows classes to inherit commonly used state and behavior from other classes.In the Java programming language, each class is allowed to have one direct superclass, and each superclass has the potential for an unlimited number of subclass.(java 是单继承的) What Is an Interface?Interface form a contract between the class and the outside world, and this contract is enforced at build time by the compiler. If your class claims to implement an interface， all methods defined by that interface must appear in its source code before the class will successfully compile. Note: To actually compile the ACMEBicycle class, you’ll need to add the public keyword to the beginning of the implemented interface methods. What Is a Package?A package is a namespace that organizes a set of related classes and interface.(因为java开发的软件由成千上万的类文件组成，将关联类和接口放在同一特定意义的包中) Language Basicsdescribes the traditional features of the language. include variables, array, data types, operators and control flow. VariablesYou’ve already learned that objects store their state in fields. However, the Java programming language also uses the term “variales” as well. This section discusses this relationshi, plus variable naming rules and conventions, basic data types (primitive types, character strings, and arrays), default value, and literals(文字).12345Q:What are the rules and conventions for naming a field?Besides int, what other data types are there?Do fields have to be initialized where they are declared?Are fields assigned a default value if they are not explicitly initialized? # 如果未明确初始化字段，为字段分配默认值吗? We’ll explore the answers to such questions in this lesson. The Java programming language defines the following kinds of variables: Instance Variables (Non-Static Fields): Technically speaking, object store their individual states in ‘non-static fields’, field declared without the static keyword. Non-static fields are also know as instance variables because their values are unique to each instance of a class (to each object, in other words); the currentSpeed of one bicycle is independent from the currentSpeed of another. Class Variables (Static Field): A class variable is any field declared with the static modifier, this tells the compiler that there is exactly one copy of the variable in existence, regardless of how many times the class has been instantiated. The code static int numGears = 6;would create such a static field. Additionally, the keyword final could be added to indicate that the number of gears will never change. Local Variables: Similar to how an object stores its state in fields, a method will often store its tempoary state in local variable. The syntax for declaring a local variable is similar to declaring a field(for example int count = 0). There is no special keyword designating a variable as local. that determination comes entirely from the location in which the variable is declared – which is between the opening and closing braces of the method. As such, local variables are only visible to the methods in which they are declared; they are not accessiable from the rest of the class. Parameters: You’ve already seen examples of parameters, both in the Bicycle class and in the main method of the “Hello World!” application.Recall that the signature for the main method is public static void main(String[] args). Here, the args variable is the parameter to this method.This applies to other parameter-accepting constructs as well (such as constructors and exception handlers) that you’ll learn about later in the tutorial. Naming 大小写敏感，以字母，$, _开头(通常都是使用字母开头，避免使用$和_) 后续字符可以是字母，$，_ 和数字，不能使用关键字和保留字 小驼峰命名；常量的话，使用大写加下划线的形式命名，例：final int NUM_GEARS = 6 Primitive Data TypesThe Java Programming language is statically-typed, which means that all variables must first declared before they can be used.This involives stating the variable’s type and name, as you’ve already seen:","categories":[{"name":"java","slug":"java","permalink":"https://capping.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://capping.github.io/tags/java/"}]},{"title":"url中的特殊字符","slug":"special-charcater-in-url","date":"2018-06-26T08:05:14.000Z","updated":"2018-09-01T12:57:26.398Z","comments":true,"path":"2018/06/26/special-charcater-in-url/","link":"","permalink":"https://capping.github.io/2018/06/26/special-charcater-in-url/","excerpt":"","text":"uri: uniform resource identifier，统一资源标识符。url: uniform resource locator，统一资源定位符。 本文中不讨论url和uri的区别, 暂全文使用url. 最近调用了一个api, 使用get请求资源. 遇到一个问题, 有的数据可以返回正确的结果, but not all!这就让我很疑惑. 解决思路也很简单, 也没有花多少时间, 在此记录下解决思路, 最后做下总结. 解决思路:拿到错误数据, 拼接好url, 拿到后台接受的数据.12# 问题url例子https:www.example.com?a=123&amp;b=abc# 其实看到这个url, 问题就明了了, 不过我还是输出下后台拿到的数据12345Array( [a] =&gt; 123 [b] =&gt; abc) 问题就出在url中带有特殊字符！ 以下是url中的特殊字符以及对应的编码： 符号 url中的含义 编码 + URL 中+号表示空格 %2B 空格 URL中的空格可以用+号或者编码 %20 / 分隔目录和子目录 %2F ? 分隔实际的URL和参数 %3F % 指定特殊字符 %25 # 表示书签 %23 &amp; URL中指定的参数间的分隔符 %26 = URL中指定参数的值 %3D 解决办法: 替换url中的特殊字符123456789101112131415class StringUtil&#123; public static function UrlEncode($str) &#123; $str = str_replace(&apos;%&apos;, &apos;%25&apos;, $str); $str = str_replace(&apos;+&apos;, &apos;%2B&apos;, $str); $str = str_replace(&apos; &apos;, &apos;%20&apos;, $str); $str = str_replace(&apos;/&apos;, &apos;%2F&apos;, $str); $str = str_replace(&apos;?&apos;, &apos;%3F&apos;, $str); $str = str_replace(&apos;#&apos;, &apos;%23&apos;, $str); $str = str_replace(&apos;&amp;&apos;, &apos;%26&apos;, $str); $str = str_replace(&apos;=&apos;, &apos;%3D&apos;, $str); return $str; &#125;&#125; 很明显, 需要先替换%, 因为编码中都存在%.","categories":[{"name":"Network","slug":"Network","permalink":"https://capping.github.io/categories/Network/"}],"tags":[{"name":"url","slug":"url","permalink":"https://capping.github.io/tags/url/"}]},{"title":"前端压缩图片, php实现上传","slug":"html5-canvas-image-compress-upload","date":"2018-06-02T02:17:24.000Z","updated":"2018-09-01T12:57:26.397Z","comments":true,"path":"2018/06/02/html5-canvas-image-compress-upload/","link":"","permalink":"https://capping.github.io/2018/06/02/html5-canvas-image-compress-upload/","excerpt":"","text":"今天在做一个图片上传的功能。流程如下: 点击添加图片按钮–&gt;拍照(或者选择相册图片)–&gt;然后会调用php的上传接口实现上传。遇到的问题: 图片的尺寸过大, 上传时间过长。解决思路: 前端压缩图片后上传。 无奈前端小哥, 工作量过大, 想让后端实现压缩后上传。经过调研, 妈呀！这不科学(后端的压缩都是图片上传成功后做的, 对提高上传速度没有卵用)。 继续探索, 找前端实现压缩的方法, 大都是使用base64做, 这… 还好我找到了张鑫旭大神的文章(http://www.zhangxinxu.com/wordpress/2017/07/html5-canvas-image-compress-upload/) 前端的实现文章里讲的很详细, 此处不再赘述。 随之而来的问题, 由于此处使用的toBlob方法方法实现的, 那做为一个php后端要怎么接收blob(binary large object)对象呢？ 普通的文件上传php使用$_FILES可以接收, 然而我var_dump()打印出来的却是一个空数组。 那试试$_REQUEST? 然后我借助搜索引擎搜索前端压缩图片后端php怎么接受?, 只能说, 我很绝望！ 继续啃大神的文章, 如下一句话, 点醒梦中人:可以把canvas转换成Blob文件，通常用在文件上传中，因为是二进制的，对后端更加友好。 然后我就找到了查询的关键字php如何接收二进制流？豁然开朗:1234# 方式一$content = $GLOBALS[&apos;HTTP_RAW_POST_DATA&apos;]; // 需要php.ini设置# 方式二$content = file_get_contents(&apos;php://input&apos;); // 不需要php.ini设置，内存压力小 作为一个技术不那么严谨的公司(连服务器的mb_string扩展都没有正确开启), 果断使用方法二。 那拿到前端传过来的blob对象,怎么把blob解析成图片呢？接下里就顺畅多了, 直接搜索php如何接收二进制流转换成图片？12345678910111213141516171819$file_name = date(&quot;YmdHis&quot;).rand(&quot;1000&quot;,&quot;9999&quot;).&quot;.png&quot;;//图片路径$file_dir = UPLOADIMGNEW.$file_name;$img = file_get_contents(&quot;php://input&quot;);if (empty($img)) &#123; thow new Exception(&apos;二进制流为空&apos;, 400); //二进制流为空&#125;if ($fp = fopen($file_dir, &apos;w&apos;)) &#123; if (fwrite($fp, $img)) &#123; fclose($fp); //成功 return json_encode[ &apos;url&apos; =&gt; &quot;http://&quot; . $_SERVER[&quot;SERVER_NAME&quot;] . &quot;:&quot; . $_SERVER[&quot;SERVER_PORT&quot;].dirname($_SERVER[&quot;SCRIPT_NAME&quot;]).&quot;/upload/img/&quot;.$file_name ]; &#125; else &#123; thow new Exception(&apos;写入文件不成功&apos;, 500); //写入文件不成功 &#125;&#125; else &#123; thow new Exception(&apos;不能打开或创建文件&apos;, 500); //不能打开或创建文件&#125; ok！ 打完收工…","categories":[{"name":"php","slug":"php","permalink":"https://capping.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"https://capping.github.io/tags/php/"},{"name":"canvas","slug":"canvas","permalink":"https://capping.github.io/tags/canvas/"},{"name":"js","slug":"js","permalink":"https://capping.github.io/tags/js/"}]},{"title":"sourceTree安装时免登录","slug":"sourceTree安装时免登录","date":"2018-05-16T09:01:55.000Z","updated":"2018-09-01T12:57:26.398Z","comments":true,"path":"2018/05/16/sourceTree安装时免登录/","link":"","permalink":"https://capping.github.io/2018/05/16/sourceTree安装时免登录/","excerpt":"","text":"sourceTree是一个工具, 我一直用它做git管理(git的图形化界面GUI)最大的一个问题是 : 安装 SourceTree 时, 需要使用atlassian授权, 即使翻墙这个过程也会出现反应慢, 收不到邮件或短信的问题, 现提供跳过 atlassian账号 授权方法。 安装之后, 转到用户本地文件夹下的 SourceTree 目录, 没有则新建： %LocalAppData%\\Atlassian\\SourceTree\\ 请把以上路径直接粘贴到我的电脑路径的位置跳转, 才能跳转到正确位置 新建 accounts.json 文件 %LocalAppData%\\Atlassian\\SourceTree\\accounts.json 输入以下内容保存即可123456789101112131415161718192021222324[ &#123; &quot;$id&quot;: &quot;1&quot;, &quot;$type&quot;: &quot;SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity&quot;, &quot;Authenticate&quot;: true, &quot;HostInstance&quot;: &#123; &quot;$id&quot;: &quot;2&quot;, &quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&quot;, &quot;Host&quot;: &#123; &quot;$id&quot;: &quot;3&quot;, &quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&quot;, &quot;Id&quot;: &quot;atlassian account&quot; &#125;, &quot;BaseUrl&quot;: &quot;https://id.atlassian.com/&quot; &#125;, &quot;Credentials&quot;: &#123; &quot;$id&quot;: &quot;4&quot;, &quot;$type&quot;: &quot;SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account&quot;, &quot;Username&quot;: &quot;&quot;, &quot;Email&quot;: null &#125;, &quot;IsDefault&quot;: false &#125;] 原博客链接：https://blog.csdn.net/liby_sunny/article/details/78813001若影响到个人利益, 请联系博主删除该文章。","categories":[{"name":"tools","slug":"tools","permalink":"https://capping.github.io/categories/tools/"}],"tags":[{"name":"git","slug":"git","permalink":"https://capping.github.io/tags/git/"}]},{"title":"我开始写博客了","slug":"我开始写博客了","date":"2018-05-14T05:59:48.000Z","updated":"2018-09-01T12:57:26.398Z","comments":true,"path":"2018/05/14/我开始写博客了/","link":"","permalink":"https://capping.github.io/2018/05/14/我开始写博客了/","excerpt":"","text":"记录一下吧, 今天是2018年5月14日, 我开始写博客了.之前一直想做一个博客, 当时没什么特别的想法, 只是感觉应该有一个. 但是慢慢的(可能是年龄大了), 想找一个平台记录下自己的生活和学习过程.在纠结了一段时间, 调研了几个常用的博客系统, 从wordpress, segmentfault, hexo等中, 最终决定使用hexo, 选择hexo一样没有理由, 就是感觉想用这个了.从此我也是一个有博客的人了…贴几条命令吧！1234567# 在package.json中配置了这个&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&quot; &#125;$ hexo new &quot;My New Post&quot;$ npm start 启动本地服务1$ hexo server","categories":[{"name":"未分类","slug":"未分类","permalink":"https://capping.github.io/categories/未分类/"}],"tags":[]}]}